<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
	<head>
		<title>PicNet Javascript / Closure Visual Studio 2010 Templates</title>
<style>
td, th 
{
	font-family:Arial;
	vertical-align:top;
	border:solid 1px silver;
}
th
{
	background-color:Black;
	color:White;
	font-weight:bold;
}
</style>
	</head>
	<body>
		<table>
			<tr><th>Shortcut</th><th>Content</th><th>Declarations</th></tr>
			<tr><td title='A standard class in javascript including provide and depend calls.'>jsclass</td><td><pre>/**
 * @fileoverview $classcomments$
 *
 */
goog.provide('$namespace$.$classname$');
goog.require('$require$');
/**
 * @constructor
 * @param {string} $param1$ A sample parameter.
 */
$namespace$.$classname$ = function($param1$) {
	$contents$
};
</pre></td><td><ul><li>classcomments: Comments describing this class</li><li>namespace: The name of this class' namespace</li><li>classname: The name of this class</li><li>require: Classes to import</li><li>param1: The name of the first constructor parameter.</li><li>contents: The contents of the class.</li></td></tr></FileName>
				<tr><td title='A javascript constant.'>jsconst</td><td><pre>/**
 * @const
 * @type {$typename$}
 */
$namespace$.$constname$ = $constvalue$;
</pre></td><td><ul><li>typename: The type of this constant.</li><li>namespace: The namespace that this constant resides in.</li><li>constname: The name of this constant.</li><li>constvalue: The value of this constant.</li></td></tr></FileName>
				<tr><td title='A standard class constructor.'>jsconstructor</td><td><pre>/**
 * @constructor
 * @param {string} $param1$ A sample parameter.
 */
$namespace$.$classname$ = function($param1$) {
	$contents$
};
</pre></td><td><ul><li>namespace: The name of this class' namespace</li><li>classname: The name of this class</li><li>param1: The name of the first constructor parameter.</li><li>contents: The contents of the class.</li></td></tr></FileName>
				<tr><td title='A standard javascript enumeration.'>jsenum</td><td><pre>/**
 * $enumcomments$
 * @enum {string}
 */
$namespace$.$enumname$ = {
  ON: 'on',
  OFF: 'off'
};
</pre></td><td><ul><li>enumcomments: Comments describing this enumeration</li><li>namespace: The name of this class' namespace</li><li>enumname: The name of this enumeration</li></td></tr></FileName>
				<tr><td title='An extends statement.'>jsextends</td><td><pre>* @extends {$namespace$.$inherits$}
</pre></td><td><ul><li>namespace: The name of this class' namespace</li><li>inherits: The name of the inherited class</li></td></tr></FileName>
				<tr><td title='A sub class of an interface including provide and depend calls.'>jsimpclass</td><td><pre>/**
 * @fileoverview $classcomments$
 *
 */
goog.provide('$namespace$.$classname$');
goog.require('$require$');
/**
 * @constructor
 * @implements {$namespace$.$implements$}
 * @param {string} $param1$ A sample parameter.
 */
$namespace$.$classname$ = function($param1$) {
	$contents$
};
</pre></td><td><ul><li>classcomments: Comments describing this class</li><li>namespace: The name of this class' namespace</li><li>classname: The name of this class</li><li>implements: The name of the implemented interface</li><li>require: Classes to import</li><li>param1: The name of the first constructor parameter.</li><li>contents: The contents of the class.</li></td></tr></FileName>
				<tr><td title='An implements statement.'>jsimplements</td><td><pre>* @implements {$namespace$.$implements$}
</pre></td><td><ul><li>namespace: The name of this class' namespace</li><li>implements: The name of the implemented interface</li></td></tr></FileName>
				<tr><td title='An inherits statment'>jsinherits</td><td><pre>goog.inherits($namespace$.$classname$, $namespace$.$inherits$);
</pre></td><td><ul><li>namespace: The name of this class' namespace</li><li>classname: The name of this class</li><li>inherits: The name of the inherited class</li></td></tr></FileName>
				<tr><td title='A standard interface in javascript including provide and depend calls.'>jsinterface</td><td><pre>/**
 * @fileoverview $interfacecomments$
 *
 */
goog.provide('$namespace$.$interfacename$');
goog.require('$require$');
/**
 * @interface
 */
$namespace$.$interfacename$ = function() {};
$namespace$.$interfacename$.prototype.$methodname$ = function() {};
</pre></td><td><ul><li>interfacecomments: </li><li>namespace: The name of this interface's namespace</li><li>interfacename: The name of this interface</li><li>require: Classes to import</li><li>methodname: A method definition in this interface.</li></td></tr></FileName>
				<tr><td title='A javascript parameter.'>jsparam</td><td><pre>/**
 * @param {string} $param1$ A sample parameter.
 */
</pre></td><td><ul><li>param1: The name of this parameter. </li></td></tr></FileName>
				<tr><td title='A javascript parameter (inline).'>jsparaminline</td><td><pre>* @param {string|number=} $param1$ A sample parameter.</pre></td><td><ul><li>param1: The name of this parameter.</li></td></tr></FileName>
				<tr><td title='An private statment for a 'this.xxx' attribute.'>jsprivate</td><td><pre>		/**     
		 * @type {$typename$}
     * @private
     */
    this.$attrname$ = $declaration$;
</pre></td><td><ul><li>typename: The name of this attribute's type</li><li>attrname: The name of this attribute</li><li>declaration: The initial declaration of this attribute</li></td></tr></FileName>
				<tr><td title='An private inline statment.'>jsprivateinline</td><td><pre>* @private</pre></td><td><ul></td></tr></FileName>
				<tr><td title='An private statment for a 'var xxx =' attribute.'>jsprivatevar</td><td><pre>		/**
		 * @type {$typename$}
     * @private
     */
    var $attrname$ = $declaration$;
</pre></td><td><ul><li>typename: The name of this attribute's type</li><li>attrname: The name of this attribute</li><li>declaration: The initial declaration of this attribute</li></td></tr></FileName>
				<tr><td title='An protected statment for a 'this.xxx' attribute.'>jsprotected</td><td><pre>		/**     
		 * @type {$typename$}
     * @protected
     */
    this.$attrname$ = $declaration$;
</pre></td><td><ul><li>typename: The name of this attribute's type</li><li>attrname: The name of this attribute</li><li>declaration: The initial declaration of this attribute</li></td></tr></FileName>
				<tr><td title='An protected inline statment.'>jsprotectedinline</td><td><pre>* @protected</pre></td><td><ul></td></tr></FileName>
				<tr><td title='An prototype member of a class (A method with access to 'this.' members).'>jsprotomem</td><td><pre>		/**
 * @param {*=} $param1$
 */
$namespace$.$classname$.prototype.$methodname$ = function($param1$) {				
		return this.member * args;
};
</pre></td><td><ul><li>namespace: The name of this class' namespace</li><li>classname: The name of this class</li><li>methodname: The name of this method</li><li>param1: The name of the sameple parameter</li></td></tr></FileName>
				<tr><td title='A provide statement.'>jsprovide</td><td><pre>goog.provide('$namespace$.$classname$');
</pre></td><td><ul><li>namespace: The name of this class' namespace</li><li>classname: The name of this class</li></td></tr></FileName>
				<tr><td title='A require statement.'>jsrequire</td><td><pre>goog.require('$namespace$.$require$');
</pre></td><td><ul><li>namespace: The name of this class' namespace</li><li>require: Classes to import</li></td></tr></FileName>
				<tr><td title='A javascript return statement'>jsreturn</td><td><pre>* @return {string}</pre></td><td><ul></td></tr></FileName>
				<tr><td title='A sub class (It extends a parent class) in javascript including provide and depend calls.'>jssubclass</td><td><pre>/**
 * @fileoverview $classcomments$
 *
 */
goog.provide('$namespace$.$classname$');
goog.require('$require$');
/**
 * @constructor
 * @extends {$namespace$.$inherits$}
 * @param {string} $param1$ A sample parameter.
 */
$namespace$.$classname$ = function($param1$) {
	$contents$
};
goog.inherits($namespace$.$classname$, $namespace$.$inherits$);
</pre></td><td><ul><li>classcomments: Comments describing this class</li><li>namespace: The name of this class' namespace</li><li>classname: The name of this class</li><li>inherits: The name of the inherited class</li><li>require: Classes to import</li><li>param1: The name of the first constructor parameter.</li><li>contents: The contents of the class.</li></td></tr></FileName>
				<tr><td title='A typedef statement.'>jstypedef</td><td><pre>/** @typedef {$type$} */
$namespace$.$typedefname$;
</pre></td><td><ul><li>namespace: The name of this class' namespace</li><li>type: The composite type of this definition</li><li>typedefname: The name of this typedef</li></td></tr></FileName>
		</table>
	</body>
</html>